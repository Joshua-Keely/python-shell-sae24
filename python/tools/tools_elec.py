"""
===================
Module `tools_elec`
===================

A télécharger :download:`ici <../../../../python/tools/tools_elec.py>`.

"""

import itertools
import logging
import os

import numpy as np
import serial


class SerialGenerator:
    __DONNEES_SIMULEES = {
        "sinus":
            b'\x7f\x00\x00\x00\x87\x00\x00\x00\x8f\x00\x00\x00\x97\x00\x00\x00\x9f\x00\x00\x00\xa6\x00\x00\x00\xae\x00\x00'
            b'\x00\xb5\x00\x00\x00\xbc\x00\x00\x00\xc3\x00\x00\x00\xca\x00\x00\x00\xd0\x00\x00\x00\xd6\x00\x00\x00\xdc\x00'
            b'\x00\x00\xe1\x00\x00\x00\xe6\x00\x00\x00\xeb\x00\x00\x00\xef\x00\x00\x00\xf2\x00\x00\x00\xf6\x00\x00\x00\xf8'
            b'\x00\x00\x00\xfa\x00\x00\x00\xfc\x00\x00\x00\xfd\x00\x00\x00\xfe\x00\x00\x00\xff\x00\x00\x00\xfe\x00\x00\x00'
            b'\xfd\x00\x00\x00\xfc\x00\x00\x00\xfa\x00\x00\x00\xf8\x00\x00\x00\xf6\x00\x00\x00\xf2\x00\x00\x00\xef\x00\x00'
            b'\x00\xeb\x00\x00\x00\xe6\x00\x00\x00\xe1\x00\x00\x00\xdc\x00\x00\x00\xd6\x00\x00\x00\xd0\x00\x00\x00\xca\x00'
            b'\x00\x00\xc3\x00\x00\x00\xbc\x00\x00\x00\xb5\x00\x00\x00\xae\x00\x00\x00\xa6\x00\x00\x00\x9f\x00\x00\x00\x97'
            b'\x00\x00\x00\x8f\x00\x00\x00\x87\x00\x00\x00\x7f\x00\x00\x00w\x00\x00\x00o\x00\x00\x00g\x00\x00\x00_\x00\x00'
            b'\x00X\x00\x00\x00P\x00\x00\x00I\x00\x00\x00B\x00\x00\x00;\x00\x00\x004\x00\x00\x00.\x00\x00\x00(\x00\x00\x00'
            b'"\x00\x00\x00\x1d\x00\x00\x00\x18\x00\x00\x00\x13\x00\x00\x00\x0f\x00\x00\x00\x0c\x00\x00\x00\x08\x00\x00\x00'
            b'\x06\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            b'\x00\x01\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\x08\x00\x00\x00\x0c\x00\x00\x00\x0f\x00'
            b'\x00\x00\x13\x00\x00\x00\x18\x00\x00\x00\x1d\x00\x00\x00"\x00\x00\x00(\x00\x00\x00.\x00\x00\x004\x00\x00\x00'
            b';\x00\x00\x00B\x00\x00\x00I\x00\x00\x00P\x00\x00\x00X\x00\x00\x00_\x00\x00\x00g\x00\x00\x00o\x00\x00\x00w\x00'
            b'\x00\x00',
        "carre":
            b'\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00'
            b'\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00'
            b'\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff'
            b'\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00'
            b'\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00'
            b'\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00'
            b'\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff'
            b'\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        "triangle":
            b'\x00\x00\x00\x00\x05\x00\x00\x00\n\x00\x00\x00\x0f\x00\x00\x00\x14\x00\x00\x00\x19\x00\x00\x00\x1e\x00\x00'
            b'\x00#\x00\x00\x00(\x00\x00\x00-\x00\x00\x003\x00\x00\x008\x00\x00\x00=\x00\x00\x00B\x00\x00\x00G\x00\x00\x00L'
            b'\x00\x00\x00Q\x00\x00\x00V\x00\x00\x00[\x00\x00\x00`\x00\x00\x00f\x00\x00\x00k\x00\x00\x00p\x00\x00\x00u\x00'
            b'\x00\x00z\x00\x00\x00\x7f\x00\x00\x00\x84\x00\x00\x00\x89\x00\x00\x00\x8e\x00\x00\x00\x93\x00\x00\x00\x99\x00'
            b'\x00\x00\x9e\x00\x00\x00\xa3\x00\x00\x00\xa8\x00\x00\x00\xad\x00\x00\x00\xb2\x00\x00\x00\xb7\x00\x00\x00\xbc'
            b'\x00\x00\x00\xc1\x00\x00\x00\xc6\x00\x00\x00\xcc\x00\x00\x00\xd1\x00\x00\x00\xd6\x00\x00\x00\xdb\x00\x00\x00'
            b'\xe0\x00\x00\x00\xe5\x00\x00\x00\xea\x00\x00\x00\xef\x00\x00\x00\xf4\x00\x00\x00\xf9\x00\x00\x00\xff\x00\x00'
            b'\x00\xf9\x00\x00\x00\xf4\x00\x00\x00\xef\x00\x00\x00\xea\x00\x00\x00\xe5\x00\x00\x00\xe0\x00\x00\x00\xdb\x00'
            b'\x00\x00\xd6\x00\x00\x00\xd1\x00\x00\x00\xcc\x00\x00\x00\xc6\x00\x00\x00\xc1\x00\x00\x00\xbc\x00\x00\x00\xb7'
            b'\x00\x00\x00\xb2\x00\x00\x00\xad\x00\x00\x00\xa8\x00\x00\x00\xa3\x00\x00\x00\x9e\x00\x00\x00\x99\x00\x00\x00'
            b'\x93\x00\x00\x00\x8e\x00\x00\x00\x89\x00\x00\x00\x84\x00\x00\x00\x7f\x00\x00\x00z\x00\x00\x00u\x00\x00\x00p'
            b'\x00\x00\x00k\x00\x00\x00f\x00\x00\x00`\x00\x00\x00[\x00\x00\x00V\x00\x00\x00Q\x00\x00\x00L\x00\x00\x00G\x00'
            b'\x00\x00B\x00\x00\x00=\x00\x00\x008\x00\x00\x003\x00\x00\x00-\x00\x00\x00(\x00\x00\x00#\x00\x00\x00\x1e\x00'
            b'\x00\x00\x19\x00\x00\x00\x14\x00\x00\x00\x0f\x00\x00\x00\n\x00\x00\x00\x05\x00\x00\x00'
    }

    def __init__(self, typedonnees: str):
        self.__data = list(np.frombuffer(self.__DONNEES_SIMULEES[typedonnees], dtype=np.int32).tolist())  # noqa

        def __generator():
            for d in itertools.cycle(self.__data):
                yield d

        self.__generator = __generator()

    def read(self, nb):
        val = next(self.__generator)
        logging.debug("Lecture valeur: %s", val)
        return chr(int(val))

    @property
    def in_waiting(self):
        return 1


class SerialReader:
    __instance = None

    def __new__(cls, *args, **kwargs):
        if SerialReader.__instance is None:
            SerialReader.__instance = super(SerialReader, cls).__new__(cls, *args, **kwargs)
            SerialReader.__instance.__init()
        return SerialReader.__instance

    def __init(self):
        self.__port = None
        self.__serial = None

    def open(self, port: str):
        self.__port = port
        if self.__port in ["sinus", "carre", "triangle"]:
            self.__serial = SerialGenerator(self.__port)
        else:
            self.__serial = serial.Serial(self.__port, 9600)

    def read(self):
        if self.__serial is None:
            raise Exception("L'appel a la fonction 'init_acquisition' n'a pas ete fait")
        while True:
            if self.__serial.in_waiting > 0:
                x = self.__serial.read(1)  # read one byte
                return ord(x)

    def __del__(self):
        if self.__serial:
            self.__serial.close()


def init_acquisition(port: str) -> bool:
    """
    Initialise l'acquisition sur le port passé en paramètre.

    :param port: le port série où est connecté la carte électronique
    :return: True si l'initialisation s'est déroulée correctement.
    """
    try:
        SerialReader().open(port)
    except Exception as e:
        return False

    return True


def lecture_octet() -> int:
    """
    Fait l'acquisition d'un octet sur la carte électronique connectée au port série donné en paramètre.

    :param port: le port série où est connecté la carte électronique
    :return: l'octet lu ou None si la connection à la carte est impossible
    """
    try:
        return SerialReader().read()
    except Exception as e:
        print(f"Connexion impossible au port série: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    import matplotlib.pyplot as plot

    time = list(range(200))

    # amplitude = [lecture_octet_simule("sinus") for i in time]
    # plot.plot(time, amplitude)
    # plot.show()
    #
    # amplitude = [lecture_octet_simule("carre") for i in time]
    # plot.plot(time, amplitude)
    # plot.show()
    #
    # amplitude = [lecture_octet_simule("triangle") for i in time]
    # plot.plot(time, amplitude)
    # plot.show()

    values = list()
    init_acquisition("COM1")
    for i in range(len(time)):
        values.append(lecture_octet())
    plot.plot(time, values)
    plot.show()
